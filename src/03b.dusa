# AOC 2024 Day 3, Part 2

# npx dusa src/03b.dusa -f data/day03-test.json -qanswer

#builtin INT_PLUS plus
#builtin INT_MINUS minus
#builtin INT_TIMES times
#builtin STRING_CONCAT concat

# # PARSING # #
# Getting the thousand number strings of interest

digit "0" is 0. digit "1" is 1.
digit "2" is 2. digit "3" is 3.
digit "4" is 4. digit "5" is 5.
digit "6" is 6. digit "7" is 7.
digit "8" is 8. digit "9" is 9.

three_digit A is N :- 
   digit A is N.
three_digit (concat A B) is (plus (times N 10) M) :- 
   digit A is N, 
   digit B is M.
three_digit (concat A B C) is (plus (times N 100) (times M 10) P) :-
   digit A is N,
   digit B is M,
   digit C is P.

num_comma (concat A ",") is N :- three_digit A is N.
num_close (concat A ")") is N :- three_digit A is N.

# # COMPUTATION: do()/don't() # #

# We need to figure out, for each index, if it turns computation
# ON, or turns computation OFF. 

# First, find everywhere the search string appears.
contains Index Rest is off :-
   field _ Index is Str,
   concat _ "don't()" Rest is Str.

contains Index Rest is on :-
   field _ Index is Str,
   concat _ "do()" Rest is Str.

# That's enough information to capture whether each
# grouping should run or not
action 0 is on.
action (plus N 1) is? Action :-
   field _ N is _,
   action N is Action.
action (plus N 1) is Action :-
   contains N Rest is Action.

# # COMPUTATION: mul() # #

# We split the string at "mul(" tokens, so we're interested in
# strings AFTER the first string that start with "N," - those 
# might be commands
maybe_mul Index Rest is First :-
   num_comma Prefix is First,
   field _ Index is Str, # field 0 12 is "2,15)..."
   Index > 0,
   concat Prefix Rest is Str.

# If, following a "mul(N," we find "M)", then we have a multiply
# at this index, N * M.
definitely_mul Index is (times First Second) :-
   num_close Prefix is Second,
   maybe_mul Index Str is First,
   concat Prefix _ is Str.

# # ACCUM # #
accum 1 is 0.
accum (plus Index 1) is Accum :-
   action Index is off,
   accum Index is Accum.
accum (plus Index 1) is? Accum :-
   action Index is on,
   accum Index is Accum.
accum (plus Index 1) is (plus Accum N) :- 
   action Index is on,
   accum Index is Accum,
   definitely_mul Index is N.
answer is N :-
   length 0 is Len, accum Len is N. 
