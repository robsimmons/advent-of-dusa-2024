# AOC 2024 Day 6, Part 2

# npx dusa src/6b.dusa -f data/day6-test.json -n0 -cstep
# Ignore 'step' output, the answer is the number of solutions

#builtin NAT_SUCC s
#builtin INT_PLUS plus

# Parsing
base_cell X Y is blocked :-
   root 0 is Root,
   field Root Y is Line,
   field Line X is "#".
base_cell X Y is clear :-
   root 0 is Root,
   field Root Y is Line,
   field Line X is Ch, Ch != "#".
start X Y :-
   root 0 is Root,
   field Root Y is Line,
   field Line X is "^".
base_clear X Y :- base_cell X Y is clear.

# Generate map with one extra blockage
blockage is? (tuple X Y) :-
   base_cell X Y is clear, 
   start X' Y', 
   tuple X Y != tuple X' Y'.
cell X Y is blocked :- base_cell X Y is blocked.
cell X Y is blocked :- blockage is (tuple X Y).
cell X Y is clear :- 
   base_cell X Y is clear, 
   (tuple X Y) != blockage.

# Core logic with cycle detection
right_turn 0 1 -1 0.
right_turn -1 0 0 -1.
right_turn 0 -1 1 0.
right_turn 1 0 0 1.

step 0 X Y 0 -1 :- start X Y.
step (s N) (plus X DX) (plus Y DY) DX DY :-
   step N X Y DX DY, next N is tt,
   cell (plus X DX) (plus Y DY) is clear.
step (s N) X Y DX' DY' :-
   step N X Y DX DY, next N is tt,
   cell (plus X DX) (plus Y DY) is blocked,
   right_turn DX DY DX' DY'.

next N is? tt :- step N _ _ _ _.
next N is ff :- step N X Y DX DY, step N' X Y DX DY, N > N'.

# Eliminate solutions that don't detect cycles
#demand next N is ff.